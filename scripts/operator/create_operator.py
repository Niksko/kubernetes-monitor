#! /usr/bin/python3

""" Creates an Operator using Operator template files in this repository.

Inputs:
- $1: The full Operator image name and tag, e.g. "snyk/kubernetes-operator:1.2.3"
- $2: The snyk-monitor image tag, e.g. "1.2.3"

Output:
- Creates a copy of the snyk-monitor Helm chart under the snyk-operator
- Builds a Docker image with the name passed in input "$1"

Creates an Operator using Operator template files in this repository.
The template files should have been previously generated by using the operator-sdk.

By using the template files, this script copies over the Helm chart and makes some minor
replacements to ensure the latest built snyk-monitor tag is used in the Operator. This way
users get all the default values of the chart, and are always pointing to the correct image tag.
"""

from sys import argv
from os import mkdir, getcwd, environ
from tempfile import mkdtemp
from subprocess import call
from os import chdir
from shutil import copy, copytree, rmtree


def createOperatorAndBuildOperatorImage(operator_tag: str, monitor_tag: str) -> None:
    new_operator_dir = mkdtemp()
    print(new_operator_dir)
    helm_chart_dir = new_operator_dir + "/" + "helm-charts"
    mkdir(helm_chart_dir)

    # Copy the LICENSE file so it is built as part of the Operator image
    license_path = "LICENSE"
    copy(license_path, new_operator_dir + "/" + "LICENSE")

    copy("snyk-operator/watches.yaml", new_operator_dir + "/" + "watches.yaml")

    # Copy the Helm chart to the new location
    copytree("snyk-monitor", helm_chart_dir + "/" + "snyk-monitor")
    copy("snyk-operator/Makefile", new_operator_dir + "/" + "Makefile")
    copy("snyk-operator/Dockerfile", new_operator_dir + "/" + "Dockerfile")

    helm_values_path = helm_chart_dir + "/" + "snyk-monitor/" + "values.yaml"
    with open(helm_values_path) as f:
        updated_helm_values = f.read().replace(
            'IMAGE_TAG_OVERRIDE_WHEN_PUBLISHING', monitor_tag)
    with open(helm_values_path, "w") as f:
        f.write(updated_helm_values)

    return_path = getcwd()
    chdir(new_operator_dir)
    environ['VERSION'] = operator_tag
    call(["make", "docker-build"])
    chdir(return_path)

    rmtree(new_operator_dir)


if __name__ == '__main__':
    _, operator_tag, monitor_tag = argv
    createOperatorAndBuildOperatorImage(operator_tag, monitor_tag)
